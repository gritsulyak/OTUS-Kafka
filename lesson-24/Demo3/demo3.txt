1) Запускаем сервисы
docker compose up -d
docker compose ps -a

2) Создаём топик topic-to-copy на первом кластере
docker exec -ti kafka1 /usr/bin/kafka-topics --create --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --replication-factor 3 --partitions 3 --topic topic-to-copy

3) Отправляем данные в топик topic-to-copy на первом кластере
docker exec -ti kafka1 /usr/bin/kafka-console-producer --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --topic topic-to-copy
one
two
three
four
five
^D

4) Запускаем MirrorMaker2
docker exec -ti kafka1-m /bin/bash
export KAFKA_LOG4J_OPTS="-Dlog4j.configuration=file:/tmp/config/connect-log4j.properties"
/opt/kafka/bin/connect-mirror-maker.sh /tmp/config/mm.properties

5) Открываем второй терминал и проверяем топик на втором кластере
docker exec -ti kafka1-m /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka1-m :9092,kafka2-m :9092,kafka3-m:9092
docker exec -ti kafka1-m /opt/kafka/bin/kafka-console-consumer.sh --topic src.topic-to-copy --bootstrap-server kafka1-m :9092,kafka2-m :9092,kafka3-m:9092 --from-beginning

6) Открываем третий терминал и отправляем данные в топик topic-to-copy на первом кластере
docker exec -ti kafka1 /usr/bin/kafka-console-producer --bootstrap-server kafka1:9092,kafka2:9092,kafka3:9092 --topic topic-to-copy
2-one
2-two
2-three
2-four
2-five
^D

7) Останавливаем сервисы
docker compose stop
docker container prune -f
docker volume prune -f
